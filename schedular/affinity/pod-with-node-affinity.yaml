apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  affinity:
    # This node affinity rule says the pod can only be placed on a node with a label whose key is kubernetes.io/e2e-az-name
    # and whose value is either e2e-az1 or e2e-az2. In addition, among nodes that meet that criteria, nodes with a label
    # whose key is another-node-label-key and whose value is another-node-label-value should be preferred.
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        # If you specify multiple nodeSelectorTerms associated with nodeAffinity types, then the pod can be scheduled
        # onto a node if one of the nodeSelectorTerms can be satisfied.
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/e2e-az-name
                # You can see the operator In being used in the example. The new node affinity syntax supports the
                # following operators: In, NotIn, Exists, DoesNotExist, Gt, Lt. You can use NotIn and DoesNotExist to
                # achieve node anti-affinity behavior
                operator: In
                values:
                  - e2e-az1
                  - e2e-az2
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            # If you specify multiple matchExpressions associated with nodeSelectorTerms, then the pod can be scheduled
            # onto a node only if all matchExpressions is satisfied.
            matchExpressions:
              - key: another-node-label-key
                operator: In
                values:
                  - another-node-label-value
  containers:
    - name: with-node-affinity
      image: nginx #k8s.gcr.io/pause:2.0